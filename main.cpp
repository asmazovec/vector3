/* Составить описание класса для объектов-векторов,
 * задаваемых координатами концов в трёхмерном пространстве,
 * считая, что компоненты векторов представлены 
 * вещественными числами типа double.
 * 
 * Компоненты векторов должны быть скрыты (инкапсулированы) 
 * в объекте.
 *
 * Предусмотреть в классе деструктор и, как минимум, два
 * конструктора:
 *
 * а) для инициализации векторов нулевыми компонентами;
 * б) заданным набором компонентов;
 *
 * Организовать в конструкторах и деструкторе вывод на
 * экран информационных сообщений, например, "Конструктор 1",
 * "Деструктор" и т.д.
 *
 *
 * I. С помощью функций-элементов класса обеспечить 
 *
 * 1) доступ к элементам вектора (чтение/запись);
 * 2) вычисление модуля вектора;
 * 3) копирование вектора;
 * 4) умножение вектора на скаляр;
 * 5) нормировку вектора (получение вектора единичной длины);
 *
 *
 * II. С помощью внешних функций обеспечить двухместные 
 * операции над векторами A и B:
 *
 * a) с получением нового вектора:
 *  1) сложение (C = A + B);
 *  2) вычитание (C = A - B);
 *  3) векторное произведение (C = A * B);
 * б) с получением скалярных величин:
 *  1) скалярного произведения двух векторов;
 *  2) косинуса и синуса угла между двумя векторами;
 *  3) величины угла в градусах между векторами в пределах [-180, 180]
 */

#include "vector3.h"

#define PRINTVECT(v) std::cout <<           \
                "(" << v.getx () << " "     \
                    << v.gety () << " "     \
                    << v.getz () <<         \
                ")" << std::endl;

int main () {
    vector3 r0;                             // Конструктор (инициализирует нулями)
    PRINTVECT (r0);         // (0 0 0)
 
    vector3 r1 (r0);                        // Конструктор копирования
    PRINTVECT (r1);         // (0 0 0)

    vector3 r2 (5, 5, 0);                   // Конструктор
    PRINTVECT (r2);         // (5 5 0)
    
    r0.sety (10);                           // Запись
    PRINTVECT (r0);         // (0 10 0)     // Проверка
    PRINTVECT (r1);         // (0 0 0)      // Сравнение с бывшей копией
    
    std::cout << r2.abs ()  // 7.***        // Модуль вектора
        << std::endl; 

    std::cout << r0.abs ()  // 10           // Еще модуль вектора
        << std::endl; 

    r2 = r2 * 2;                            // Умножение вектора на скаляр
    PRINTVECT (r2);         // (10 10 0)

    r0 = r0.normalize ();                   // Нормализация вектора
    PRINTVECT (r0);         // (0, 1, 0)

    r2 = r2 + r2;                           // Сумма векторов
    PRINTVECT (r2);         // (20 20 0)

    r2 = r2 - (r2 * 0.5);                   // Разность векторов
    PRINTVECT (r2);         // (10 10 0)

    r0 = r2 * r0;                           // Векторное произведение векторов
    PRINTVECT (r0);         // (0 0 10)

    r0 = r0 + r2;
    std::cout << (r0 & r2)  // 200          // Скалярное произведение векторов
        << std::endl;
    
    std::cout << cos (r0, r2)
        << std::endl; 

    std::cout << sin (r0, r2)
        << std::endl; 

    std::cout << angle (r0, r2)
        << std::endl;

    PRINTVECT (r0);
    r0 = 2 * r0;
    PRINTVECT (r0);

    return 0;
}







