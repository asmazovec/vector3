/* Составить описание класса для объектов-векторов,
 * задаваемых координатами концов в трёхмерном пространстве,
 * считая, что компоненты векторов представлены 
 * вещественными числами типа double.
 * 
 * Компоненты векторов должны быть скрыты (инкапсулированы) 
 * в объекте.
 *
 * Предусмотреть в классе деструктор и, как минимум, два
 * конструктора:
 *
 * а) для инициализации векторов нулевыми компонентами;
 * б) заданным набором компонентов;
 *
 * Организовать в конструкторах и деструкторе вывод на
 * экран информационных сообщений, например, "Конструктор 1",
 * "Деструктор" и т.д.
 *
 *
 * I. С помощью функций-элементов класса обеспечить 
 *
 * 1) доступ к элементам вектора (чтение/запись);
 * 2) вычисление модуля вектора;
 * 3) копирование вектора;
 * 4) умножение вектора на скаляр;
 * 5) нормировку вектора (получение вектора единичной длины);
 *
 *
 * II. С помощью внешних функций обеспечить двухместные 
 * операции над векторами A и B:
 *
 * a) с получением нового вектора:
 *  1) сложение (C = A + B);
 *  2) вычитание (C = A - B);
 *  3) векторное произведение (C = A * B);
 * б) с получением скалярных величин:
 *  1) скалярного произведения двух векторов;
 *  2) косинуса и синуса угла между двумя векторами;
 *  3) величины угла в градусах между векторами в пределах [-180, 180]
 */

#include "vector3.h"
#include <iostream>
#include <cmath>

using namespace AltMath;
int main () {   
    // Инициализировать нулями 
    vector3 r0;

    // Инициализация по значениям
    vector3 r1 (1, 2, 3);
    
    // Копирование
    vector3 r2 (r1);

    // Геттеры
    std::cout << "Геттеры  . . . . . . . . . . . . . . . . . .  "
              << r2.getx () << " "
              << r2.gety () << " "
              << r2.getz () << " "
              << std::endl;

    // Сеттеры
    std::cout << "Сеттеры  . . . . . . . . . . . . . . . . . .  " 
              << r2.setx (5).sety (0).setz (0) 
              << std::endl;

    // Модуль вектора
    std::cout << "Модуль вектора . . . . . . . . . . . . . . .  " 
              << r2.abs ()
              << std::endl;

    // Нормализация вектора (получение вектора единичной длины)
    std::cout << "Нормализация вектора 1 (конструктор) . . . .  " 
              << std::endl;
    r2.getnormalize ();

    std::cout << "Нормализация вектора 2 . . . . . . . . . . .  "
              << r2.tonormalize ()
              << std::endl;

    // Присваивание
    r1 = r2;
    r0 = 3;
    std::cout << "Присваивание вектору вектора . . . . . . . .  "  
              << r1
              << std::endl
              << "Присваивание вектору числа . . . . . . . . .  "
              << r0
              << std::endl;
    
    // Унарные операторы '+', '-'
    std::cout << "Унарный +  . . . . . . . . . . . . . . . . .  "
              << +r2
              << std::endl
              << "Унарный -  . . . . . . . . . . . . . . . . .  "
              << -r2
              << std::endl;

    // Сумма векторов
    std::cout << "Сумма векторов 1 (конструктор) . . . . . . .  "
              << std::endl;
    r1 + r2;

    r1 += r2;
    std::cout << "Сумма векторов 2 (присваивание)  . . . . . .  " 
              << r1
              << std::endl;

    // Разность векторов
    std::cout << "Разность векторов 1 (конструктор)  . . . . .  " 
              << std::endl;
    r2 - r1;

    r2 -= r1;
    std::cout << "Разность векторов 2 (присваивание) . . . . .  "
              << r2
              << std::endl;

    // Произведение вектора со скаляром
    std::cout << "Произведение вектора и скаляра (конструкторы) "
              << std::endl;
    r2 * -2.5;
    -2.5 * r2;
    
    r2 *= -2.5;
    std::cout << "Произведение вектора и скаляра (присваивание) "
              << r2
              << std::endl;

    // Векторное произведение двух векторов
    r1.setx(5).sety(5).setz(0);
    r2.setx(0).sety(1).setz(1);
    std::cout << "Вектроное произведение (конструктор) . . . .  "
              << std::endl;
    r1 * r2;
    r2 * r1; // отличаются знаком

    r1 *= r2;
    std::cout << "Векторное произведение (присваивание)  . . .  "
              << r1
              << std::endl;

    // Скалярное произведение двух векторов
    r1.setx(5).sety(5).setz(0);
    r2.setx(0).sety(1).setz(1);
    std::cout << "Скалярное произведение . . . . . . . . . . .  "
              << (r1 & r2)
              << std::endl;

    // Косинус 
    std::cout << "Косинус  . . . . . . . . . . . . . . . . . .  "
              << cos (r1, r2) 
              << std::endl;

    // Синус
    std::cout << "Синус  . . . . . . . . . . . . . . . . . . .  "
              << std::endl
              << sin (r1, r2)
              << std::endl;

    // Величина угла
    std::cout << "Величина угла  . . . . . . . . . . . . . . .  "
              << std::endl
              << angle (r1, r2)
              << std::endl;
   
    return 0;
}







